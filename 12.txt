1)****************************************************************************

#include<stdio.h>
#include<string.h>
int  main()
{
	int i,q,s,f,final[20],j,trans[20][20],z,qq,sno,state;
	char sym[10],str[30],ch,c;
	printf("\nenter the number of states");
	scanf("%d",&q);
	printf("\nenter the number of symbols");
	scanf("%d",&s);
	printf("\nenter the number of final states");
	scanf("%d",&f);

	printf("\nenter the symbols");
	for(i=0;i<s;i++)
		{
		scanf(" %c",&sym[i]);
		}
	printf("\nenter the final states");
	for(i=0;i<f;i++)
		{
		scanf("%d",&final[i]);
		}
	printf("\nenter the transition table");
	for(i=0;i<q;i++)
	{
		printf("\nenter for state %d \n symbol",i);
		for(j=0;j<s;j++)
		{
			printf(" %c=",sym[j]);
			scanf("%d",&trans[i][j]);
		}
	}

	printf("\nenter a string ");
	scanf("%s",str);
	qq=0;
	for(i=0;i<strlen(str);i++)
	{
		ch=str[i];
		for(j=0;j<s;j++)
		{
			if(ch==sym[j])
			break;
		}
		sno=j;
		//intf("j=%d\t",j);
		state=trans[qq][sno];
		//printf("state %d\t",state);
		qq=state;
	}

	for(i=0;i<f;i++)
	{
		if(state==final[i])
			break;
	}
//printf("\nstate=%d",state);
	if(i==f)
		printf("\ninvalid string");
	else
		printf("\nvalid string");
}


2)****************************************************************************

#include<stdio.h>
#include<malloc.h>
#include<stdlib.h>
#define newnode (struct node *)malloc(sizeof(struct node))

struct node
{
	int jno,ar_time,br_time,co_time,rem_time,sub_time,prio;
	struct node * next;
}*jobq=NULL,*finish=NULL;
int nj;
struct node * append(struct node *f,struct node *t)
{
	struct node *s;
	if(f==NULL)
	f=t;
	else
	{
		for(s=f;s->next!=NULL;s=s->next);
		s->next=t;
	}	
return f;
}
void creatjobq()
{
	struct node *t;
	int i;
	printf("How many jobs???\n");
	scanf("%d",&nj);
	for(i=0;i<nj;i++)
	{
		t=newnode;
		t->jno=i+1;
		t->co_time=0;
		t->next=NULL;
		printf("Enter the arival time of job %d::",i+1);
		scanf("%d",&t->ar_time);
		printf("Enter the burst time of job %d::",i+1);
		scanf("%d",&t->br_time);
		printf("Enter the priority of job %d::",i+1);
		scanf("%d",&t->prio);
		t->rem_time=t->br_time;
		t->sub_time=t->ar_time;
		jobq=append(jobq,t);
	}
}
void display()
{
	struct node *s;
	printf("jno\tar time\tbr time\tPriority");
	for(s=jobq;s!=NULL;s=s->next)
	printf("\n%d\t%d\t%d\t%d",s->jno,s->ar_time,s->br_time,s->prio);
}
struct node * selectjob(struct node *f,int time)
{
	struct node *s,*t=NULL;int min=3678;
	for(s=f;s!=NULL;s=s->next)
	{
		if(s->ar_time<=time)  
		{
			if(s->prio<min){min=s->prio;t=s;}
			else if(s->prio==min && s->ar_time<t->ar_time)t=s;
		}
	}
	return t;

}
void delnode(struct node *s)
{
	struct node *t;
	if(jobq==s)
	jobq=jobq->next;
	else
	{
	for(t=jobq;t->next!=s;t=t->next);
		t->next=s->next;
	}
	s->next=NULL;
	finish=append(finish,s);
	
}
void execute()
{
	struct node *s=NULL,*t;int time=0;
	int wt=0,tat=0,avgtat=0,avgwt=0;
	if(jobq==NULL)
	{
	printf("\nNO jobs available");
	return;
	}
	printf("\ngant chart");
	while(jobq!=NULL)
	{
		s=selectjob(jobq,time);
		if(s==NULL){printf("|---idel---");time++;}
		else
		{
			
			time+=s->br_time;
			if(s->co_time==0)
			{
				s->co_time=time;
			}
			else
			{
				printf("|---%d---|",s->jno);
				delnode(s);
			}
		}
	}
	//report
	printf("|\nreport");printf("\njobno\tarivrltime\tbursttime\tPriority\tco time\tTAT\tWT\n");
	for(t=finish;t!=NULL;t=t->next)
	{
		tat=t->co_time-t->sub_time;
		wt=tat-t->br_time;
		
		printf("\n%d\t%d\t\t%d\t\t%d\t\t%d\t%d\t%d\t\n",t->jno,t->sub_time,t->br_time,t->prio,t->co_time,tat,wt);
		avgtat+=tat;
		avgwt+=wt;
	}
	printf("average TAT=%f",avgtat/(float)nj);
	printf("average WT=%f",avgwt/(float)nj);	
}
main()
{
	creatjobq();
	display();
	execute();
}
